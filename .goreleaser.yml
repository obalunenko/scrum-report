release:
  github:
    owner: obalunenko
    name: scrum-report
  footer: |
    **Full Changelog**: https://github.com/obalunenko/georgia-tax-calculator/compare/{{ .PreviousTag }}...{{ .Tag }}

gomod:
  proxy: true
  # If proxy is true, use these environment variables when running `go mod` commands (namely, `go mod tidy`).
  # Defaults to `os.Environ()`.
  env:
    - GOPROXY=https://proxy.golang.org,direct
    - GOSUMDB=sum.golang.org
    - GOPRIVATE=example.com/blah
    - CGO_ENABLED=0
  # Which Go binary to use.
  # Defaults to `go`.
  gobinary: go

before:
  hooks:
    - go mod verify

builds:
  - id: service
    binary: scrum-report
    goos:
      - linux
      - darwin
      - windows
    goarch:
      - 386
      - amd64
      - arm
      - arm64
    mod_timestamp: '{{ .CommitTimestamp }}'
    env:
      - CGO_ENABLED=0
    main: ./cmd/scrum-report
    flags:
      - -trimpath
    ldflags:
      - "{{ .Env.GO_BUILD_LDFLAGS }}"
      -
universal_binaries:
  - # ID of the source build
    #
    # Defaults to the project name.
    id: service

    # Universal binary name template.
    #
    # You will want to change this if you have multiple builds!
    #
    # Defaults to '{{ .ProjectName }}'
    name_template: 'scrum-report'

    # Whether to remove the previous single-arch binaries from the artifact list.
    # If left as false, your end release might have both several macOS archives: amd64, arm64 and all.
    #
    # Defaults to false.
    replace: true
dockers:
  # You can have multiple Docker images.
  -
    # GOOS of the built binary that should be used.
    goos: linux

    # GOARCH of the built binary that should be used.
    goarch: amd64

    # GOARM of the built binary that should be used.
    goarm: ''

    # Build IDs to gather the binaries from.
    ids: ['service', 'scrum-report']

    image_templates:
      - "olegbalunenko/scrum-report:latest"
      - "olegbalunenko/scrum-report:{{ .Tag }}"
      - "olegbalunenko/scrum-report:v{{ .Major }}.{{ .Minor }}"

    # Skips the docker push. Could be useful if you also do draft releases.
    # If set to auto, the release will not be pushed to the docker repository
    # in case there is an indicator for prerelease in the tag e.g. v1.0.0-rc1
    # Defaults to false.
    skip_push: false

    # Path to the Dockerfile (from the project root).
    dockerfile: build/docker/scrum-report/releaser.Dockerfile
    extra_files:
      - build/docker/scrum-report/entrypoint.sh

    # If your Dockerfile copies files other than the binary itself,
    # you should list them here as well.
    # Note that goreleaser will create the same structure inside the temporary
    # folder, so if you add `foo/bar.json` here, on your Dockerfile you can
    # `COPY foo/bar.json /whatever.json`.
    # Also note that the paths here are relative to the folder in which
    # goreleaser is being run.
    # This field does not support wildcards, you can add an entire folder here
    # and use wildcards when you `COPY`/`ADD` in your Dockerfile.

archives:
  - id: service
    builds:
      - service
    rlcp: true
    format: tar.gz
    wrap_in_directory: true
    format_overrides:
      - goos: windows
        format: zip
    name_template: "{{ .Binary }}-{{ .Version }}-{{ .Os }}-{{ .Arch }}{{ if .Arm }}v{{ .Arm }}{{ end }}"
    files:
      - LICENSE
      - README.md
checksum:
  name_template: "{{ .ProjectName }}-{{ .Version }}-checksums.txt"

snapshot:
  name_template: SNAPSHOT-{{ .Commit }}

changelog:
  sort: asc
  use: github
  filters:
    exclude:
      - "^docs:"
      - "^test:"
      - "^dev:"
      - "README"
      - "^readme"
      - "^scripts"
      - "scripts:"
      - Merge pull request
      - Merge branch
      - Rebase on master
      - "^Makefile"
      - "goreleaser"
  groups:
    - title: 'New Features'
      regexp: "^.*feat[(\\w)]*:+.*$"
      order: 0
    - title: 'Bug fixes'
      regexp: "^.*fix[(\\w)]*:+.*$"
      order: 10
    - title: Other work
      order: 999

milestones:
  - close: true
